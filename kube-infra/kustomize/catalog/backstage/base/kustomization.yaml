helmCharts:
- name: backstage
  namespace: backstage
  version: 0.0.17
  repo: https://ortelius.github.io/backstage
  releaseName: backstage
  includeCRDs: true
  valuesInline:
    app:
      image:
        repository: ghcr.io/ortelius/backstage/app
        tag: "0.0.2"
        pullPolicy: Always
      ingress:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: nginx
          nginx.ingress.kubernetes.io/backend-protocol: HTTP
          nginx.ingress.kubernetes.io/ssl-passthrough: "false"
        hosts:
          - backstage.ortelius.io
    backend:
      image:
        repository: ghcr.io/ortelius/backstage/backend
        tag: "0.0.2"
        pullPolicy: Always
      ingress:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: nginx
          nginx.ingress.kubernetes.io/backend-protocol: HTTP
          nginx.ingress.kubernetes.io/ssl-passthrough: "false"
        hosts:
          - backstage-backend.ortelius.io
    psql:
      connectionString:
        secret: postgres-secrets
        key: POSTGRES_CONNECTION_STRING
      host: postgresql.postgresql.svc
      port: 5432
      username: backstage
      password:
        secret: postgres-secrets
        key: POSTGRES_PASSWORD
    appConfig:
      app:
        title: Ortelius Backstage
        baseUrl: https://backstage.ortelius.io
      organization:
        name: Oretlius Dev
      auth:
        environment: production
        providers:
          github:
            development:
              clientId: ${GITHUB_CLIENT_ID}
              clientSecret: ${GITHUB_CLIENT_SECRET}
      backend:
        baseUrl: https://backstage-backend.ortelius.io
        listen:
          port: 7007
        cors:
          origin: https://backstage.ortelius.io
          methods: [GET, POST, PUT, DELETE]
          credentials: true
        database:
          client: pg
          connection:
            host: ${POSTGRES_HOST}
            port: ${POSTGRES_PORT}
            user: ${POSTGRES_USER}
            password: ${POSTGRES_PASSWORD}
          knexConfig:
            pool:
              min: 15
              max: 30
              acquireTimeoutMillis: 60000
              createTimeoutMillis: 30000
              destroyTimeoutMillis: 5000
              idleTimeoutMillis: 60000
              reapIntervalMillis: 1000
              createRetryIntervalMillis: 200
              propagateCreateError: false
      kubernetes:
        serviceLocatorMethod:
          type: 'multiTenant'
        clusterLocatorMethods:
          - type: 'config'
            clusters:
              - url: ${KUBERNETES_URL}
                name: aks
                serviceAccountToken: ${KUBERNETES_TOKEN}
                authProvider: 'serviceAccount'
                skipTLSVerify: true
                skipMetricsLookup: true
      proxy:
        '/argocd/api':
          target: ${ARGOCD_BASE_URL}/api/v1/
          changeOrigin: true
          secure: false
          headers:
            Cookie:
              $env: ${ARGOCD_AUTH_TOKEN}
      argocd:
        username: ${ARGOCD_USERNAME}
        password: ${ARGOCD_PASSWORD}
        appLocatorMethods:
          - type: 'config'
            instances:
              - name: production
                url: ${ARGOCD_BASE_URL}

      techdocs:
        builder: external
      catalog:
        import:
          entityFilename: catalog-info.yaml
          pullRequestBranchName: backstage-integration
        rules:
          - allow: [Component, System, API, Resource, Location]
        locations:
          - type: url
            target: https://github.com/ortelius/backstage/blob/main/catalog-info.yaml
            rules:
              - allow: [User, Group]
